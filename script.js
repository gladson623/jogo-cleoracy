const elements = {
    sun: { name: 'sun', icon: '‚òÄÔ∏è' },      // Sol
    water: { name: 'water', icon: 'üíß' },    // √Ågua
    earth: { name: 'earth', icon: 'üåç' },    // Terra
    air: { name: 'air', icon: 'üå¨Ô∏è' }       // Ar
};

const combinations = {
    'sun+water': { name: 'Vapor', icon: '‚òÅÔ∏è' },
    'earth+air': { name: 'Poeira', icon: 'üå™Ô∏è' },
    'sun+air': { name: 'Energia', icon: '‚ö°' },
    'water+earth': { name: 'Lama', icon: 'üåø' },
    'sun+earth': { name: 'Lava', icon: 'üåã' },
    'water+air': { name: 'Tempestade', icon: '‚õàÔ∏è' },
    'air+water': { name: 'Gelo', icon: '‚ùÑÔ∏è' },
    'air+sun': { name: 'Fuma√ßa', icon: 'üí®' },
    'lava+water': { name: 'Pedra', icon: 'ü™®' },
    'sun+poeira': { name: 'Cinzas', icon: 'üå´Ô∏è' },
    'water+lava': { name: 'Obsidiana', icon: 'üñ§' },
    'air+lama': { name: 'P√¢ntano', icon: 'üê∏' },
    'sun+vapor': { name: 'Onda de Calor', icon: 'üî•' },
    'water+energia': { name: 'El√©trico', icon: '‚ö°üíß' },
    'earth+vapor': { name: 'G√™iser', icon: 'üåã' },
    'air+tempestade': { name: 'Tornado', icon: 'üå™Ô∏è' },
    'sun+gelo': { name: 'Fogo G√©lido', icon: 'üî•‚ùÑÔ∏è' },
    'water+obsidiana': { name: 'Cristal', icon: 'üíé' },
    'air+obsidiana': { name: 'Fragmento', icon: 'üåå' },
    'earth+lava': { name: 'Vulc√£o', icon: 'üåã' },
    'lama+vapor': { name: 'Termas', icon: 'üåä' },
    'poeira+lava': { name: 'Rocha Derretida', icon: 'üåë' },
    'vapor+lava': { name: 'Plasma', icon: 'üå©Ô∏è' },
    'air+p√¢ntano': { name: 'Miasma', icon: 'üíÄ' },
    'earth+cristal': { name: 'Pedra Preciosa', icon: 'üíé' },
    'sun+obsidiana': { name: 'Obsidiana Derretida', icon: 'üñ§üî•' },
    'water+fragmento': { name: 'Cristal de Gelo', icon: '‚ùÑÔ∏èüíé' },
    'sun+g√™iser': { name: 'Fonte de Magma', icon: 'üî•üåã' },
    'water+tornado': { name: 'Furac√£o', icon: 'üå™Ô∏èüíß' },
    'air+g√™iser': { name: 'Jato de Vapor', icon: 'üå´Ô∏è' }
};

const badCombinations = {
    'earth+fire': { name: 'Queimada', icon: 'üî•' },
    'water+earth': { name: 'Deslizamento de Terra', icon: 'üåßÔ∏è' },
    'pollution+water': { name: 'Contamina√ß√£o', icon: 'üå´Ô∏è' },
    'erosion+deforestation': { name: 'Desertifica√ß√£o', icon: 'üèúÔ∏è' }
};


let createdElements = new Set();
let firstElement = null;
let movingElement = null;
let timer = 30;
let score = 0;
let interval;
let draggedElements = []; // Armazena os elementos soltos
let isPaused = false;
// Elementos DOM
const startScreen = document.getElementById('start-screen');
const gameScreen = document.getElementById('game-screen');
const endScreen = document.getElementById('end-screen');
const playerNameInput = document.getElementById('player-name');
const timerElement = document.getElementById('time-left');
const scoreElement = document.getElementById('player-score');
const finalScoreElement = document.getElementById('final-score');
const resultDiv = document.getElementById('result');
const dropZone = document.getElementById('drop-zone');
const createdElementsList = document.getElementById('created-elements');
const highScoresList = document.getElementById('high-scores-list'); // Lista de placares

// Fun√ß√£o para iniciar o jogo
function startGame() {
    const playerName = playerNameInput.value.trim();
    if (playerName) {
        
            if(playerName == 'comando:limparcache'){
                sessionStorage.clear()
                alert('Comando executado com sucesso');
                return
            }
        
        const highScores = getHighScores();
        const playerExists = highScores.some(scoreEntry => scoreEntry.player === playerName);

        if (playerExists) {
            alert('Nome de usu√°rio j√° est√° em uso. Escolha outro nome.');
            return;
        }

        sessionStorage.setItem('currentPlayer', playerName);
        sessionStorage.setItem('currentScore', score);
        sessionStorage.setItem('highScores', JSON.stringify(getHighScores()));

        startScreen.style.display = 'none';
        gameScreen.style.display = 'block';
        startTimer();
        pauseTimer()
        showModal('Instru√ß√µes do Jogo', false)
        $('#elementModal').modal('show')
    } else {
        alert('Por favor, insira seu nome.');
    }
}

function startTimer() {
    interval = setInterval(() => {
        timer--
        timerElement.textContent = timer;

        if (timer <= 0) {
            endGame();
        }
    }, 1000);
}


// Fun√ß√£o para adicionar tempo ao cron√¥metro
function addTime() {
    timer += 3;
}

// Fun√ß√£o para aumentar a pontua√ß√£o
function increaseScore() {
    score++;
    scoreElement.textContent = score;
    sessionStorage.setItem('currentScore', score);
}

// Fun√ß√£o para encerrar o jogo e mostrar a tela de fim
function endGame() {
    clearInterval(interval);
    finalScoreElement.textContent = `Sua pontua√ß√£o final: ${score}`;
    saveHighScore(sessionStorage.getItem('currentPlayer'), score);
    updateHighScoresList(); // Atualiza o ranking
    gameScreen.style.display = 'none';
    endScreen.style.display = 'block';
    
    // Adicionar cor de fundo com base no nome do jogador
    const currentPlayer = sessionStorage.getItem('currentPlayer');
    endScreen.style.backgroundColor = getColorForPlayer(currentPlayer);
    if (currentPlayer) {
        finalScoreElement.style.color = 'green';
    } else {
        finalScoreElement.style.color = 'black'; // Cor padr√£o caso n√£o haja jogador
    }
}

// Fun√ß√£o para obter a cor de fundo com base no nome do jogador
function getColorForPlayer(playerName) {
    // Adapte esta fun√ß√£o para fornecer cores diferentes conforme necess√°rio
    const colors = {
        'Gladson': '#FFDDC1',
        'Gustavo': '#C1E1C1'
    };

    return colors[playerName] || '#FFFFFF'; // Cor padr√£o se o jogador n√£o tiver cor definida
}

// Fun√ß√£o para atualizar a lista de placares
function updateHighScoresList() {
    highScoresList.innerHTML = ''; // Limpa a lista existente

    const highScores = getHighScores();
    const currentPlayer = sessionStorage.getItem('currentPlayer');

    if (highScores.length === 0) {
        highScoresList.innerHTML = '<li>Nenhum placar registrado ainda.</li>';
        return;
    }

    highScores.forEach(scoreEntry => {
        const listItem = document.createElement('li');
        listItem.textContent = `${scoreEntry.player}: ${scoreEntry.score}`;
        
        // Destacar o nome do usu√°rio logado
        if (scoreEntry.player === currentPlayer) {
            listItem.style.color = 'green';
        } else {
            listItem.style.color = 'black';
        }

        highScoresList.appendChild(listItem);
    });
}


// Fun√ß√£o para salvar a pontua√ß√£o no ranking
// Fun√ß√£o para salvar a pontua√ß√£o no ranking
function saveHighScore(player, score) {
    const highScores = getHighScores();
    const playerIndex = highScores.findIndex(scoreEntry => scoreEntry.player === player);

    if (playerIndex !== -1) {
        // Se o jogador j√° existe, atualize a pontua√ß√£o se for maior
        if (highScores[playerIndex].score < score) {
            highScores[playerIndex].score = score;
        }
    } else {
        // Se o jogador n√£o existe, adicione uma nova entrada
        highScores.push({ player, score });
    }

    highScores.sort((a, b) => b.score - a.score);
    sessionStorage.setItem('highScores', JSON.stringify(highScores));
}

// Fun√ß√£o para obter as pontua√ß√µes mais altas
function getHighScores() {
    return JSON.parse(sessionStorage.getItem('highScores')) || [];
}

// Fun√ß√£o para reiniciar o jogo
function restartGame() {
    score = 0;
    timer = 30;
    createdElements = new Set(); // Reseta os elementos criados
    draggedElements = []; // Reseta a lista de elementos arrastados
    scoreElement.textContent = score;
    timerElement.textContent = timer;
    createdElementsList.innerHTML = ''; // Limpa a lista de elementos criados
    removeAllDropZoneElements(); // Remove todos os elementos do drop zone
    endScreen.style.display = 'none';
    gameScreen.style.display = 'block';
    startTimer();
}

// Fun√ß√µes para arrastar e combinar os elementos
function handleTouchStart(event) {
    const touch = event.touches[0];
    movingElement = event.target;
    movingElement.style.position = 'absolute';
    movingElement.style.left = `${touch.pageX - movingElement.offsetWidth / 2}px`;
    movingElement.style.top = `${touch.pageY - movingElement.offsetHeight / 2}px`;

    // Adicionar o elemento √† lista de elementos arrastados
    if (!draggedElements.includes(movingElement)) {
        draggedElements.push(movingElement);
        if (draggedElements.length > 2) {
            // Remover o elemento mais antigo da lista e devolv√™-lo √† posi√ß√£o original
            const elementToReturn = draggedElements.shift();
            resetElementPosition(elementToReturn);
        }
    }
}

function handleTouchMove(event) {
    event.preventDefault();
    const touch = event.touches[0];

    if (movingElement) {
        movingElement.style.left = `${touch.pageX - movingElement.offsetWidth / 2}px`;
        movingElement.style.top = `${touch.pageY - movingElement.offsetHeight / 2}px`;
    }
}

function handleTouchEnd(event) {
    if (movingElement && isInDropZone(movingElement)) {
        if (!firstElement) {
            firstElement = movingElement.getAttribute('data-element');
            resultDiv.textContent = `Primeiro elemento: ${firstElement}`;
        } else {
            const secondElement = movingElement.getAttribute('data-element');
            const result = combineElements(firstElement, secondElement);

            if (result && !createdElements.has(result)) {
                createNewElement(result);
                createdElements.add(result);
                addTime();
                increaseScore();
            } else if (createdElements.has(result)) {
                resultDiv.textContent = `${result} j√° foi criado!`;
            }

            firstElement = null; // Reiniciar ap√≥s combina√ß√£o
        }
    } else if (movingElement) {
        // Se o elemento n√£o estiver na √°rea de "drop", devolv√™-lo √† posi√ß√£o original
        resetElementPosition(movingElement);
    }
    movingElement = null;
}




function combineElements(element1, element2) {
   
    const combination = `${element1}+${element2}`;
    const reverseCombination = `${element2}+${element1}`;
    
    let result = null;
    // Verifica se a combina√ß√£o √© uma combina√ß√£o boa ou ruim
    if (combinations[combination]) {
        result = combinations[combination];
    } else if (combinations[reverseCombination]) {
        result = combinations[reverseCombination];
    } else if (badCombinations[combination]) {
        result = badCombinations[combination];
    } else if (badCombinations[reverseCombination]) {
        result = badCombinations[reverseCombination];
    }
     console.log(JSON.stringify(createdElements))
    // Agora tratamos o resultado
    if (result && !createdElements.has(result)) {
        createdElements.add(result);
        result = result.name +' '+ result.icon;
        createNewElement(result);


        // Se for uma combina√ß√£o ruim, subtrai tempo e mostra modal para combina√ß√£o ruim
        if (badCombinations[combination] || badCombinations[reverseCombination]) {
            subtractTime();
            showModal(result, true);  // Mostrar modal explicando por que o elemento √© ruim
        } else {
            // Se for uma boa combina√ß√£o, adiciona tempo e mostra modal para boa combina√ß√£o
            addTime();
            showModal(result, false);  // Mostrar modal explicando sobre o novo elemento
        }

        increaseScore();  // Aumenta pontua√ß√£o ap√≥s criar novo elemento
    } else if (createdElements.has(result)) {
        resultDiv.textContent = `${result.name +' '+ result.icon} j√° foi criado!`;
    } else {
        resultDiv.textContent = 'Nenhuma combina√ß√£o v√°lida!';
    }

    firstElement = null; // Reiniciar ap√≥s combina√ß√£o
}


// Fun√ß√£o para criar um novo elemento visualmente
function createNewElement(content) {
    const newElement = document.createElement('div');
    newElement.classList.add('element');
    newElement.setAttribute('data-element', content);
    newElement.textContent = content;

    newElement.style.position = 'absolute';
    newElement.style.left = `${Math.random() * (dropZone.offsetWidth - 50)}px`;
    newElement.style.top = `${Math.random() * (dropZone.offsetHeight - 50)}px`;

    newElement.addEventListener('touchstart', handleTouchStart);
    newElement.addEventListener('touchmove', handleTouchMove);
    newElement.addEventListener('touchend', handleTouchEnd);

    dropZone.appendChild(newElement);
    addToCreatedElementsList(content);
}

// Adiciona o novo elemento √† lista de elementos criados
function addToCreatedElementsList(content) {
    const listItem = document.createElement('li');
    listItem.textContent = content;
    createdElementsList.appendChild(listItem);
}

// Verifica se o elemento est√° na √°rea de "drop"
function isInDropZone(element) {
    const dropZoneRect = dropZone.getBoundingClientRect();
    const elementRect = element.getBoundingClientRect();

    return (
        elementRect.left < dropZoneRect.right &&
        elementRect.right > dropZoneRect.left &&
        elementRect.top < dropZoneRect.bottom &&
        elementRect.bottom > dropZoneRect.top
    );
}

// Fun√ß√£o para remover todos os elementos do drop zone
function removeAllDropZoneElements() {
    while (dropZone.firstChild) {
        dropZone.removeChild(dropZone.firstChild);
    }
}

// Fun√ß√£o para pausar o temporizador
function pauseTimer() {
    if (!isPaused) {
        clearInterval(interval); // Pausar o temporizador
        isPaused = true;
    }
}
function resumeTimer() {
    if (isPaused) {
        startTimer(); // Retomar o temporizador
        isPaused = false;
    }
}
// Fun√ß√£o para resetar a posi√ß√£o de um elemento
function resetElementPosition(element) {
    element.style.position = 'relative';
    element.style.left = 'auto';
    element.style.top = 'auto';
    element.classList.remove('dragging'); // Opcional: Remover classe de arrasto
    draggedElements = draggedElements.filter(el => el !== element);
}

// Fun√ß√£o para lidar com o logout
function handleLogout() {
    // Limpar o estado do jogo e os dados da sess√£o
    sessionStorage.removeItem('currentPlayer');
    sessionStorage.removeItem('currentScore');

    // Resetar o jogo e mostrar a tela de in√≠cio
    score = 0;
    timer = 30;
    createdElements = new Set(); // Reseta os elementos criados
    draggedElements = []; // Reseta a lista de elementos arrastados
    scoreElement.textContent = score;
    timerElement.textContent = timer;
    createdElementsList.innerHTML = ''; // Limpa a lista de elementos criados
    removeAllDropZoneElements(); // Remove todos os elementos do drop zone
    
    startScreen.style.display = 'block';
    endScreen.style.display = 'none';
}

// Adicionar eventos aos elementos iniciais
document.querySelectorAll('.element').forEach(element => {
    element.addEventListener('touchstart', handleTouchStart);
    element.addEventListener('touchmove', handleTouchMove);
    element.addEventListener('touchend', handleTouchEnd);
});

function subtractTime() {
    timer -= 3;
}
function showModal(content, isBadElement) {
    const modalTitle = document.getElementById('modalTitle');
    const modalBody = document.getElementById('modalBody');

    if (content === 'Instru√ß√µes do Jogo') {
        modalTitle.textContent = 'Instru√ß√µes do Jogo';
        modalBody.innerHTML = `
            <p>Bem-vindo ao Jogo de Combina√ß√µes! Este jogo tem como intuito ensinar sobre o impacto de nossas a√ß√µes no mundo.</p>
            <p>O tempo de vida do mundo est√° representado pelo cron√¥metro. Ao criar algo bom, o tempo aumenta em 3 segundos. Ao criar algo ruim, o tempo diminui em 3 segundos.</p>
        `;
        document.querySelector('.modal-content').style.backgroundColor = '#fff'; // Cor padr√£o
    } else {
        if (isBadElement) {
            modalTitle.textContent = `Elemento Ruim Criado: ${content}`;
            modalBody.innerHTML = `<p>Esse elemento √© prejudicial e resultou em uma penalidade de tempo!</p>`;
            document.querySelector('.modal-content').style.backgroundColor = '#f8d7da'; // Cor vermelha
        } else {
            modalTitle.textContent = `Novo Elemento Criado: ${content}`;
            modalBody.innerHTML = `<p>Voc√™ descobriu um novo elemento. Bom trabalho!</p>`;
            document.querySelector('.modal-content').style.backgroundColor = '#d4edda'; // Cor verde
        }
    }

    pauseTimer();

    $('#elementModal').modal('show');

    $('#elementModal').on('hidden.bs.modal', function () {
        resumeTimer(); // Retoma o temporizador quando o modal √© fechado
    });
}


// Adicionar eventos de clique aos bot√µes
document.getElementById('start-game').addEventListener('click', startGame);
document.getElementById('restart-game').addEventListener('click', restartGame);
document.getElementById('logout').addEventListener('click', handleLogout);
